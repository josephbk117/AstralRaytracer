# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      # 4. <MacOS, Release, latest Clang compiler toolchain on the default runner image, default generator>
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_type: [Release, Debug]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl
          - os: macos-latest
            c_compiler: gcc
          - os: macos-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install xorg
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install --fix-missing xorg-dev libglu1-mesa-dev

    - name: Install latest Clang
      if: matrix.os == 'ubuntu-latest' && matrix.c_compiler == 'clang'
      run: |
       wget https://apt.llvm.org/llvm.sh
       chmod +x ./llvm.sh
       sudo ./llvm.sh 17

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake (Non-Ubuntu, Non clang)
      if: matrix.os != 'ubuntu-latest' || matrix.c_compiler != 'clang'
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

   
    - name: Configure CMake (Ubuntu, Clang)
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      if: matrix.os == 'ubuntu-latest' && matrix.c_compiler == 'clang'
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=clang++-17
        -DCMAKE_C_COMPILER=clang-17
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config ${{ matrix.build_type }}

    - name: Prepare Artifacts
      if: matrix.build_type == 'Release'
      run:  |
        mkdir artifact
        if [ "${{ matrix.cpp_compiler }}" = "msvc" ]; then
        echo "Fetchin files for MSVC and placing it in artifact folder"
        cp -r ${{ steps.strings.outputs.build-output-dir }}/AstralRaytracerApp/app_assets artifact/
        cp ${{ steps.strings.outputs.build-output-dir }}/AstralRaytracerApp/Release/AstralRaytracerApp.exe artifact/
        else
        echo "Fetchin files for GCC/Clang and placing it in artifact folder"
        cp -r ${{ steps.strings.outputs.build-output-dir }}/AstralRaytracerApp/app_assets artifact/
        cp ${{ steps.strings.outputs.build-output-dir }}/AstralRaytracerApp/AstralRaytracerApp artifact/
        fi
     
    - name: Upload build artifacts
      if: matrix.build_type == 'Release'
      uses: actions/upload-artifact@v4
      with:
        name: binary-${{ matrix.os }}-${{ matrix.cpp_compiler }}
        # A file, directory or wildcard pattern that describes what to upload
        # Required.
        path: artifact
        # Duration after which artifact will expire in days. 0 means using default retention.
        # Minimum 1 day.
        # Maximum 90 days unless changed from the repository settings page.
        # Optional. Defaults to repository settings.
        retention-days: 0    
        # The level of compression for Zlib to be applied to the artifact archive.
        # The value can range from 0 to 9.
        # For large files that are not easily compressed, a value of 0 is recommended for significantly faster uploads.
        # Optional. Default is '6'
        compression-level: 9
